seq_len(3)
checkmate::assert_matrix
?checkmate::assert_matrix
source("~/Library/CloudStorage/Box-Box/Tools/R_scripts/R_packages/miscHelpers/R/scoreSpecificity.R", echo=TRUE)
checkmate::assert_integerish
checkmate::assertMatrix
?pbeta
scoreSpecificity <- function(counts, targets, controls, nPrior = 3, sPrior = 1) {
# initialize list for storing output
checkmate::assertMatrix(counts, mode = "numeric")
checkmate::assertCharacter(targets)
checkmate::assertCharacter(controls)
checkmate::assertIntegerish(nPrior)
checkmate::assertIntegerish(sPrior)
if (!all(targets %in% rownames(counts))) {
stop("All targets must be present in the rownames of the counts matrix")
}
if (!all(controls %in% rownames(counts))) {
stop("All controls must be present in the rownames of the counts matrix")
}
scoresList <- list()
# loop over targets argument
for (target in targets) {
# initialize vector for storing value from each control
scoresCurrTarget <- c()
for (controlNum in seq_len(length(controls))) {
# get 1 - pvalue for each control for the target of the current iteration
scoresCurrTarget <-
cbind(
scoresCurrTarget,
(1 - (pbeta(.925,
as.numeric(counts[target,]) + sPrior,
as.numeric(counts[controls[controlNum],]) + nPrior))) * 100)
}
scoresList[[i]] <- rowMeans(scoresCurrTarget)
}
return(scoresList)
}
?scoreSpecificity
# Chunk 1: setFilenamesAndGlobalVariables
dirBoxBase <-
file.path("~", "Library", "CloudStorage", "Box-Box")
dirRoot <-
file.path(
dirBoxBase, "Projects", # Box version
# "~", "Documents", "Projects_local", # local version
"P552_Helicobacter_B_cell_10x")
dirPlots <- file.path(dirRoot, "plots")
if (!dir.exists(dirPlots)) dir.create(dirPlots)
dirDataSaved <- file.path(dirRoot, "data_saved")
if (!dir.exists(dirDataSaved)) dir.create(dirDataSaved)
dirDataOutput <- file.path(dirRoot, "data_output")
if (!dir.exists(dirDataOutput)) dir.create(dirDataOutput)
dirBcrLineageAnalysis <- file.path(dirRoot, "BCR_lineage_analysis")
if (!dir.exists(dirBcrLineageAnalysis)) dir.create(dirBcrLineageAnalysis)
dataDate <- "2024-01-03"
filenameSuffix <- paste0("P552-1_10x_analysis_pre_ChangeO.", dataDate)
projectNumberGenomicsCore <- "P552-1"
tenxSummaryDir <- "231121_P552-1"
# Chunk 2: setDirectory
knitr::opts_knit$set(root.dir = dirRoot)
setwd(dirRoot)
# save/load temporary versions of data objects
# save(list = ls(), file = file.path("data_saved", "workspaceTmp.RData"))
# load(file.path("data_saved", "workspaceTmp.RData"))
# save/load temporary version of data10x
# saveRDS(data10x, file = file.path("data_saved", "data10xTmp.RDS"))
# readRDS(file.path("data_saved", "data10xTmp.RDS"))
# Chunk 3: loadPackagesAndSetDefaults
# create new renv project library if not already existing
# if(!isTRUE(renv::status()$synchronized)) renv::init()
library(knitr)
library(tidyverse)
library(ggthemes)
library(edgeR)
library(RColorBrewer)
library(kableExtra)
library(viridis)
library(ggbeeswarm)
library(GGally) # for ggpairs
library(gplots)
library(plotscale) # allows outputting sized plots
library(ComplexHeatmap)
library(Seurat)
# BCR analysis tools
library(clonality) # devtools::install_github("moodymudskipper/safejoin"); devtools::install_github("victoraLab/clonality")
clusterResolution <-
c("rnaExBcr" = 0.3,
"rnaExBcrRpMt" = 0.3
# "RnaGcNonNaive" = 0.8
)
# running with 0.8 yielded 11 clusters, too many!
# running with 0.5 yielded 10 clusters, still too many
# running with 0.3 yielded 7 clusters, which looks right
clusterName <- character()
clusterMarkers <- list()
palCluster <- list()
# set cluster name
clusterName[["rnaExBcrRpMt"]] <-
paste0("seurat_clusters_rnaExBcrRpMt_", str_replace(clusterResolution[["rnaExBcrRpMt"]], "\\.", "p"))
# check for saved version of data10x for easy recovery
filenameData10xClusterProjectRnaExBcrRpMt <-
file.path(dirDataSaved,
paste0("data10xClusterProjectRnaExBcrRpMt.", filenameSuffix, ".RDS"))
if (file.exists(filenameData10xClusterProjectRnaExBcrRpMt)) {
data10x <- readRDS(filenameData10xClusterProjectRnaExBcrRpMt)
} else {
# add assay without BCR/RP/MT genes
data10x[["rnaExBcrRpMt"]] <-
CreateAssayObject(
counts =
data10x[["RNA"]]$counts[
!str_detect(rownames(data10x[["RNA"]]$counts), "^(Ig[hkl][adegmcvj]|Rp[ls]|mt)"),])
# normalize data (skip for integrated data, as data already normalized)
data10x <- NormalizeData(data10x, assay = "rnaExBcrRpMt", normalization.method = "LogNormalize")
# find variable features (skip for integrated data, as variable features already found)
data10x <- FindVariableFeatures(data10x, assay = "rnaExBcrRpMt")
# scale data (skip for integrated data, as data already scaled)
data10x <- ScaleData(data10x, assay = "rnaExBcrRpMt")
# run PCA
data10x <-
RunPCA(data10x, assay = "rnaExBcrRpMt", verbose = FALSE,
reduction.name = "pca_rnaExBcrRpMt", reduction.key = "pcRnaExBcrRpMt_")
# ElbowPlot(data10x, reduction = "pca_rnaExBcrRpMt") # looks like 5, 8, 9, or 12 PCs would be best
# find nearest neighbors and shared nearest neighbors
data10x <-
FindNeighbors(
data10x, reduction = "pca_rnaExBcrRpMt", dims = 1:30,
graph.name = c("nn_rnaExBcrRpMt", "snn_rnaExBcrRpMt"))
# find clusters
rownames(data10x@meta.data) <- data10x@meta.data$cellBarcode
data10x <-
FindClusters(
data10x, graph.name = "snn_rnaExBcrRpMt",
resolution = clusterResolution[["rnaExBcrRpMt"]],
random.seed = 0,
verbose = FALSE)
# make cluster order more logical; will need to be tweaked if anything changes upstream
Idents(data10x) <-
Idents(data10x) %>%
dplyr::recode(
"0" = "0", # naive cells
"3" = "1", # naive cells
"7" = "2", # naive cells (but off to the side)
"1" = "3", # GC B cells
"2" = "4", # GC B cells
"4" = "5", # GC B cells
"5" = "6", # antibody-secreting cells
"6" = "7" # special category TBD
) %>%
factor(levels = str_sort(unique(.), numeric = TRUE))
# store clusters from rnaExBcrRpMt in metadata
data10x <- data10x %>%
AddMetaData(Idents(data10x), col.name = clusterName[["rnaExBcrRpMt"]])
# store broad cell type classification
data10x@meta.data$cellType <-
case_when(
data10x@meta.data[[clusterName[["rnaExBcrRpMt"]]]] %in% as.character(0:2) ~ "naive", # naive and naive-like B cells
data10x@meta.data[[clusterName[["rnaExBcrRpMt"]]]] %in% as.character(3:5) ~ "GC", # germinal center B cells
data10x@meta.data[[clusterName[["rnaExBcrRpMt"]]]] %in% as.character(6:6) ~ "ASC", # antibody-secreting cells
data10x@meta.data[[clusterName[["rnaExBcrRpMt"]]]] %in% as.character(7:7) ~ "other", # antibody-secreting cells
TRUE ~ "unknown") %>%
factor(levels = c("naive", "GC", "ASC", "other"))
# run UMAP
data10x <-
RunUMAP(data10x, reduction = "pca_rnaExBcrRpMt", dims = 1:30,
reduction.name = "umap_rnaExBcrRpMt", reduction.key = "umapRnaExBcrRpMt_")
# run tSNE
data10x <-
RunTSNE(data10x, reduction = "pca_rnaExBcrRpMt", dims = 1:30,
reduction.name = "tsne_rnaExBcrRpMt", reduction.key = "tsneRnaExBcrRpMt_")
saveRDS(data10x, filenameData10xClusterProjectRnaExBcrRpMt)
}
# calculate specificity scores
specificiftyAdt <-
scoreSpecificity(
counts = data10x[["ADT"]]$counts,
targets = c("CD38", "CD138", "FAS"),
controls = "Rat IgG2a - Isotype control")
data10x[["ADT"]]$counts
?checkmate::assertMatrix
inherits(data10x[["ADT"]]$counts, "matrix")
inherits(data10x[["ADT"]]$counts)
class(data10x[["ADT"]]$counts)
inherits(data10x[["ADT"]]$counts, "Matrix")
inherits(as.matrix(data10x[["ADT"]]$counts), "Matrix")
class(as.matrix(data10x[["ADT"]]$counts))
?inherits
checkmate::assertNumeric
checkmate::assertNumeric(as.matrix(data10x[["ADT"]]$counts))
is.numeric(as.matrix(data10x[["ADT"]]$counts))
is.numeric(data10x[["ADT"]]$counts)
data10x[["ADT"]]$counts
class(data10x[["ADT"]]$counts)
checkmate::assertNumeric(as.matrix(counts))
checkmate::testNumeric(as.matrix(data10x[["ADT"]]$counts))
checkmate::testNumeric(data10x[["ADT"]]$counts)
scoreSpecificity <- function(counts, targets, controls, nPrior = 3, sPrior = 1) {
# initialize list for storing output
if (!(inherits(counts, "matrix") | inherits(counts, "Matrix")))
stop("Input `counts` object must be a matrix.")
checkmate::assertNumeric(as.matrix(counts))
checkmate::assertCharacter(targets)
checkmate::assertCharacter(controls)
checkmate::assertIntegerish(nPrior)
checkmate::assertIntegerish(sPrior)
if (!all(targets %in% rownames(counts))) {
stop("All targets must be present in the rownames of the counts matrix")
}
if (!all(controls %in% rownames(counts))) {
stop("All controls must be present in the rownames of the counts matrix")
}
scoresList <- list()
# loop over targets argument
for (target in targets) {
# initialize vector for storing value from each control
scoresCurrTarget <- c()
for (controlNum in seq_len(length(controls))) {
# get 1 - pvalue for each control for the target of the current iteration
scoresCurrTarget <-
cbind(
scoresCurrTarget,
(1 - (pbeta(.925,
as.numeric(counts[target,]) + sPrior,
as.numeric(counts[controls[controlNum],]) + nPrior))) * 100)
}
scoresList[[i]] <- rowMeans(scoresCurrTarget)
}
return(scoresList)
}
# calculate specificity scores
specificiftyAdt <-
scoreSpecificity(
counts = data10x[["ADT"]]$counts,
targets = c("CD38", "CD138", "FAS"),
controls = "Rat IgG2a - Isotype control")
scoreSpecificity <- function(counts, targets, controls, nPrior = 3, sPrior = 1) {
# initialize list for storing output
if (!(inherits(counts, "matrix") | inherits(counts, "Matrix")))
stop("Input `counts` object must be a matrix.")
checkmate::assertNumeric(as.matrix(counts))
checkmate::assertCharacter(targets)
checkmate::assertCharacter(controls)
checkmate::assertIntegerish(nPrior)
checkmate::assertIntegerish(sPrior)
if (!all(targets %in% rownames(counts))) {
stop("All targets must be present in the rownames of the counts matrix")
}
if (!all(controls %in% rownames(counts))) {
stop("All controls must be present in the rownames of the counts matrix")
}
scoresList <- list()
# loop over targets argument
for (target in targets) {
# initialize vector for storing value from each control
scoresCurrTarget <- c()
for (controlNum in seq_len(length(controls))) {
# get 1 - pvalue for each control for the target of the current iteration
scoresCurrTarget <-
cbind(
scoresCurrTarget,
(1 - (pbeta(.925,
as.numeric(counts[target,]) + sPrior,
as.numeric(counts[controls[controlNum],]) + nPrior))) * 100)
}
scoresList[[target]] <- rowMeans(scoresCurrTarget)
}
return(scoresList)
}
# calculate specificity scores
specificiftyAdt <-
scoreSpecificity(
counts = data10x[["ADT"]]$counts,
targets = c("CD38", "CD138", "FAS"),
controls = "Rat IgG2a - Isotype control")
specificityAdt
specificitfyAdt
specificiftyAdt
# calculate specificity scores
specificityAdt <-
scoreSpecificity(
counts = data10x[["ADT"]]$counts,
targets = c("CD38", "CD138", "FAS"),
controls = "Rat IgG2a - Isotype control")
specificityAdt
scoreSpecificity <- function(counts, targets, controls, nPrior = 3, sPrior = 1) {
# initialize list for storing output
if (!(inherits(counts, "matrix") | inherits(counts, "Matrix")))
stop("Input `counts` object must be a matrix.")
checkmate::assertNumeric(as.matrix(counts))
checkmate::assertCharacter(targets)
checkmate::assertCharacter(controls)
checkmate::assertIntegerish(nPrior)
checkmate::assertIntegerish(sPrior)
if (!all(targets %in% rownames(counts))) {
stop("All targets must be present in the rownames of the counts matrix")
}
if (!all(controls %in% rownames(counts))) {
stop("All controls must be present in the rownames of the counts matrix")
}
scores <- data.frame(samplename = colnames(counts))
# loop over targets argument
for (target in targets) {
# initialize vector for storing value from each control
scoresCurrTarget <- c()
for (controlNum in seq_len(length(controls))) {
# get 1 - pvalue for each control for the target of the current iteration
scoresCurrTarget <-
cbind(
scoresCurrTarget,
(1 - (pbeta(.925,
as.numeric(counts[target,]) + sPrior,
as.numeric(counts[controls[controlNum],]) + nPrior))) * 100)
}
scores[, target] <- rowMeans(scoresCurrTarget)
}
return(scores)
}
# calculate specificity scores
specificityAdt <-
scoreSpecificity(
counts = data10x[["ADT"]]$counts,
targets = c("CD38", "CD138", "FAS"),
controls = "Rat IgG2a - Isotype control")
specificityAdt
head(data10x@meta.data$specificityCD38)
rm(specificiftyAdt)
head(specificityAdt$CD38)
head(specificityAdt$CD138)
head(data10x@meta.data$specificityCD138)
colnames(specificityAdt)[-1]
rm(list = ls())
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
devtools::install(file.path("..", packageName))
